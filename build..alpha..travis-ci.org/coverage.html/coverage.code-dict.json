{"/home/travis/build/npmtest/node-npmtest-koa-better-body/test.js":"/* istanbul instrument in package npmtest_koa_better_body */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-better-body/lib.npmtest_koa_better_body.js":"/* istanbul instrument in package npmtest_koa_better_body */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_koa_better_body = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_koa_better_body = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-better-body/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-koa-better-body && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_koa_better_body */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_koa_better_body\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_koa_better_body.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_koa_better_body.rollup.js'] =\n            local.assetsDict['/assets.npmtest_koa_better_body.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_koa_better_body.__dirname + '/lib.npmtest_koa_better_body.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-better-body/node_modules/koa-better-body/index.js":"/*!\n * koa-better-body <https://github.com/tunnckoCore/koa-better-body>\n *\n * Copyright (c) 2014-2016 Charlike Mike Reagent <@tunnckoCore> (http://www.tunnckocore.tk)\n * Released under the MIT license.\n */\n\n'use strict'\n\nvar utils = require('./utils')\n\n/**\n * > Robust body parser for [koa][]@1, also works for `koa@2` (with deprecations).\n * Will also work for future `koa@3` with [koa-convert][].\n *\n * **Example**\n *\n * ```js\n * var koa = require('koa')\n * var body = require('koa-better-body')\n * var app = koa()\n *\n * app\n *   .use(body())\n *   .use(function * () {\n *     console.log(this.request.body)    // if buffer or text\n *     console.log(this.request.files)   // if multipart or urlencoded\n *     console.log(this.request.fields)  // if json\n *   })\n *   .listen(8080, function () {\n *     console.log('koa server start listening on port 8080')\n *   })\n * ```\n *\n * @param  {Object} `options` see more on [options section](#options)\n * @return {GeneratorFunction}\n * @api public\n */\n\nmodule.exports = function koaBetterBody (options) {\n  options = utils.defaultOptions(options)\n\n  return function * plugin (next) {\n    if (options.strict && !utils.isValid(this.method)) {\n      return yield * next\n    }\n\n    try {\n      utils.setParsers(this, options)\n      yield * utils.parseBody(this, options, next)\n    } catch (err) {\n      if (!options.onerror) throw err\n      options.onerror(err, this)\n    }\n\n    yield * next\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-koa-better-body/node_modules/koa-better-body/utils.js":"'use strict'\n\n/**\n * Module dependencies\n */\n\nvar utils = require('lazy-cache')(require)\n\n/**\n * Temporarily re-assign `require` to trick browserify and\n * webpack into reconizing lazy dependencies.\n *\n * This tiny bit of ugliness has the huge dual advantage of\n * only loading modules that are actually called at some\n * point in the lifecycle of the application, whilst also\n * allowing browserify and webpack to find modules that\n * are depended on but never actually called.\n */\n\nvar fn = require\nrequire = utils // eslint-disable-line no-undef, no-native-reassign, no-global-assign\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('extend-shallow', 'extend')\nrequire('formidable')\nrequire('koa-body-parsers', 'bodyParsers')\nrequire('querystring')\n\n/**\n * Restore `require`\n */\n\nrequire = fn // eslint-disable-line no-undef, no-native-reassign, no-global-assign\n\n/**\n * > Patch querystring logic. By default uses node's\n * built-in `querystring` module, otherwise that is\n * provided from `opts.querystring`. Works well with\n * the `qs` module. You can pass it like that\n *\n * **Example**\n *\n * ```js\n * app.use(body({\n *   querystring: require('qs')\n * }))\n * ```\n *\n * @param  {String} `str` querystring\n * @param  {Object} `opts` loaded options\n * @return {Object} parsed querystring object\n * @api private\n */\nutils.parseQs = function parseQs (str, opts) {\n  return opts.querystring\n    ? opts.querystring.parse(str, opts)\n    : utils.querystring.parse(str, opts.delimiter, '=', opts)\n}\n\n/**\n * > Default options that will be loaded. Pass `options` to overwrite them.\n *\n * @param  {Object} `options`\n * @return {Object}\n * @api private\n */\nutils.defaultOptions = function defaultOptions (options) {\n  options = typeof options === 'object' ? options : {}\n  var types = utils.defaultTypes(options.extendTypes)\n  options = utils.extend({\n    fields: false,\n    files: false,\n    multipart: true,\n    textLimit: false,\n    formLimit: false,\n    jsonLimit: false,\n    jsonStrict: true,\n    detectJSON: false,\n    bufferLimit: false,\n    buffer: false,\n    strict: true,\n\n    // query string `parse` options\n    delimiter: '&',\n    decodeURIComponent: utils.querystring.unescape,\n    maxKeys: 1000\n  }, options)\n\n  options.delimiter = options.sep || options.delimiter\n  options.formLimit = options.formLimit || options.urlencodedLimit\n  options.extendTypes = types\n  options.onerror = options.onЕrror || options.onerror\n  options.onerror = typeof options.onerror === 'function'\n    ? options.onerror\n    : false\n  options.delimiter = typeof options.delimiter === 'string'\n    ? options.delimiter\n    : '&'\n\n  if (typeof options.handler !== 'function') {\n    options.handler = function * noopHandler () {}\n  }\n  if (typeof options.detectJSON !== 'function') {\n    options.detectJSON = function detectJSON () {\n      return false\n    }\n  }\n\n  return options\n}\n\n/**\n * > Only extend/overwrite default accept types.\n *\n * @param  {Object} `types`\n * @return {Object}\n * @api private\n */\nutils.defaultTypes = function defaultTypes (types) {\n  types = typeof types === 'object' ? types : {}\n  return utils.extend({\n    multipart: [\n      'multipart/form-data'\n    ],\n    text: [\n      'text/*'\n    ],\n    form: [\n      'application/x-www-form-urlencoded'\n    ],\n    json: [\n      'application/json',\n      'application/json-patch+json',\n      'application/vnd.api+json',\n      'application/csp-report'\n    ],\n    buffer: [\n      'text/*'\n    ]\n  }, types)\n}\n\n/**\n * > Is \"valid\" request method, according to IETF Draft.\n *\n * @see   https://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-19#section-6.1\n * @param  {String} `method` koa request method\n * @return {Boolean}\n * @api private\n */\nutils.isValid = function isValid (method) {\n  return ['GET', 'HEAD', 'DELETE'].indexOf(method.toUpperCase()) === -1\n}\n\n/**\n * > Add `koa-body-parsers` to the koa context. In addition\n * also adds the formidable as multipart parser.\n *\n * @param  {Object} `ctx` koa context\n * @param  {Object} `opts` default options\n * @return {Object} `ctx` koa context\n * @api private\n */\nutils.setParsers = function setParsers (ctx, opts) {\n  ctx.app.querystring = opts.querystring ||\n    opts.qs || // alias\n    ctx.app && ctx.app.querystring ||\n    ctx.app && ctx.app.qs || // alias\n    ctx.querystring ||\n    ctx.qs // alias\n\n  utils.bodyParsers(ctx)\n  ctx.request.multipart = utils.multipart.bind(ctx)\n  return ctx\n}\n\n/**\n * > Formidable wrapper as multipart parser to make\n * thunk that later can be yielded. Also allows you to pass\n * formidable.IncomingForm instance to `options.IncomingForm`.\n *\n * @param  {Object} `options` passed or default plugin options\n * @param  {Object} `ctx` koa context\n * @return {Function} thunk\n * @api private\n */\nutils.multipart = function multipart (options) {\n  var ctx = this\n\n  return function thunk (done) {\n    var buff = ''\n    var fields = {}\n    var files = []\n    var form = options.IncomingForm instanceof utils.formidable.IncomingForm\n      ? options.IncomingForm\n      : new utils.formidable.IncomingForm(options)\n\n    form.on('error', done)\n    form.on('aborted', done)\n    form.on('file', function (name, value) {\n      files.push(value)\n      fields[name] = fields[name] || []\n      fields[name].push(value)\n    })\n    form.on('field', function (name, value) {\n      buff += name + '=' + value + options.delimiter\n    })\n    form.on('end', function () {\n      fields = buff && buff.length\n        ? utils.extend({}, utils.parseQs(buff.slice(0, -1), options), fields)\n        : fields\n\n      done(null, {\n        fields: fields,\n        files: files\n      })\n    })\n    form.parse(ctx.req)\n  }\n}\n\n/**\n * > Parse a different type of request bodies. By default accepts\n * and can parse JSON, JSON-API, JSON-Patch, text, form, urlencoded\n * and buffer bodies.\n *\n * @param {Object}   `ctx` koa context\n * @param {Object}   `options` plugin options\n * @param {Function} `next` next middleware\n * @api private\n */\nutils.parseBody = function * parseBody (ctx, options, next) { /* eslint complexity: [2, 12] */\n  var fields = typeof options.fields === 'string' ? options.fields : 'fields'\n  var files = typeof options.files === 'string' ? options.files : 'files'\n  var custom = options.extendTypes.custom\n\n  if (custom && custom.length && ctx.request.is(custom)) {\n    yield * options.handler.call(ctx, ctx, options, next)\n    return yield * next\n  }\n  if (options.detectJSON(ctx) || ctx.request.is(options.extendTypes.json)) {\n    ctx.app.jsonStrict = typeof options.jsonStrict === 'boolean' ? options.jsonStrict : true\n    ctx.request[fields] = yield ctx.request.json(options.jsonLimit)\n    return yield * next\n  }\n  if (ctx.request.is(options.extendTypes.form || options.extendTypes.urlencoded)) {\n    var res = yield ctx.request.urlencoded(options.formLimit)\n    ctx.request[fields] = res\n    return yield * next\n  }\n  if (options.buffer && ctx.request.is(options.extendTypes.buffer)) {\n    ctx.request.body = yield ctx.request.buffer(options.bufferLimit)\n    return yield * next\n  }\n  if (ctx.request.is(options.extendTypes.text)) {\n    var limit = options.textLimit\n    var body = yield ctx.request.text(limit)\n\n    ctx.request.body = body\n    return yield * next\n  }\n  if (options.multipart && ctx.request.is(options.extendTypes.multipart)) {\n    var result = yield ctx.request.multipart(options)\n    ctx.request[fields] = result.fields\n    ctx.request[files] = result.files\n    return yield * next\n  }\n}\n\n/**\n * Expose `utils` modules\n */\n\nmodule.exports = utils\n"}